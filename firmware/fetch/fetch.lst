BYTE     WORD     CODE            #:col    SOURCE
----------------------------------------------------------------------
0000     0000     002c            4:1      JMP 'start                      //  
0010     0008     ----           25:3    :uartstat                         //  
0010     0008     a000           26:5      #$2000                          //  (macro: UART_STATUS_REG)
0012     0009     6d50           26:21     io[T][IORD]                     //  (macro: io@)
0014     000a     6300           26:25     T&N                             //  (macro: overand)
0016     000b     6703           26:33     N==T[d-1]                       //  (macro: =)
0018     000c     608c           27:1      T[RET,r-1]                      //  (macro: ;)
001a     000d     ----           30:3    :emit?                            //  
001a     000d     6000           31:5      T                               //  (macro: pause)
001c     000e     8001           32:5      #1                              //  Push transmit ready mask
001e     000f     a000           33:5      #$2000                          //  (macro: UART_STATUS_REG)
0020     0010     6d50           33:21     io[T][IORD]                     //  (macro: io@)
0022     0011     6300           34:5      T&N                             //  (macro: overand)
0024     0012     6703           35:5      N==T[d-1]                       //  (macro: =)
0026     0013     608c           36:1      T[RET,r-1]                      //  (macro: ;)
0028     0014     ----           39:3    :key?                             //  
0028     0014     6000           40:5      T                               //  (macro: pause)
002a     0015     8002           41:5      #2                              //  Push receive ready mask
002c     0016     4008           42:5      CALL uartstat                   //  Check UART status
002e     0017     608c           43:1      T[RET,r-1]                      //  (macro: ;)
0030     0018     ----           46:3    :emit                             //  
0030     0018     400d           47:5      CALL emit?                      //  Check if ready to transmit
0032     0019     2018           48:5      ZJMP 'emit                      //  If not ready, keep waiting
0034     001a     9000           49:5      #$1000                          //  (macro: UART_DATA_REG)
0036     001b     7842           49:19     3OS[N->io[T],d-2]               //  (macro: io!)
0038     001c     608c           50:1      T[RET,r-1]                      //  (macro: ;)
003a     001d     ----           53:3    :key                              //  
003a     001d     4014           54:5      CALL key?                       //  Check if character available
003c     001e     201d           55:5      ZJMP 'key                       //  If no character, keep waiting
003e     001f     9000           56:5      #$1000                          //  (macro: UART_DATA_REG)
0040     0020     6d50           56:19     io[T][IORD]                     //  (macro: io@)
0042     0021     608c           57:1      T[RET,r-1]                      //  (macro: ;)
0044     0022     ----           60:3    :2emit                            //  
0044     0022     6110           61:5      N[T->N]                         //  (macro: swap)
0046     0023     6127           61:10     N[T->R,r+1,d-1]                 //  (macro: >r)
0048     0024     4018           62:5      CALL emit                       //  Send first char
004a     0025     6b1d           63:5      rT[T->N,r-1,d+1]                //  (macro: r>)
004c     0026     4018           63:8      CALL emit                       //  Send second char
004e     0027     608c           64:1      T[RET,r-1]                      //  (macro: ;)
0050     0028     ----           18:3    :@                                //  
0050     0028     c000           19:5      #$4000                          //  
0052     0029     6403           19:12     T|N[d-1]                        //  (macro: or)
0054     002a     6127           19:15     N[T->R,r+1,d-1]                 //  (macro: >r)
0056     002b     608c           19:18     T[RET,r-1]                      //  (macro: ;)
0058     002c     ----           21:3    :start                            //  
0058     002c     401d           23:5      CALL key                        //  
005a     002d     6103           23:9      N[d-1]                          //  (macro: drop)
005c     002e     8008           26:5      #8                              //  
005e     002f     8004           26:8      #$0004                          //  (macro: IRQ_COUNT0)
0060     0030     7832           26:19     3OS[N->[T],d-2]                 //  (macro: !)
0062     0031     8043           28:5      #$43                            //  'C' - to show we got here
0064     0032     4018           28:10     CALL emit                       //  'C' - to show we got here
0066     0033     8004           29:5      #$0004                          //  (macro: IRQ_COUNT0)
0068     0034     4028           29:16     CALL @                          //  Address to fetch from
006a     0035     ----           31:3    :return_here                      //  this is byte address 6a
006a     0035     8044           32:5      #$44                            //  'D' - to show fetch worked
006c     0036     4018           32:10     CALL emit                       //  'D' - to show fetch worked
006e     0037     8030           34:5      #$30                            //  n + 30, Convert to ASCII by adding '0' (0x30)
0070     0038     6203           34:10     T+N[d-1]                        //  (macro: +)
0072     0039     4018           35:5      CALL emit                       //  
0074     003a     ----           37:3    :main_loop                        //  
0074     003a     6000           38:5      T                               //  (macro: noop)
0076     003b     003a           39:5      JMP 'main_loop                  //  Repeat forever
