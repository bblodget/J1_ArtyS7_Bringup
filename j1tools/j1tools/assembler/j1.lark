// Core J1 Grammar - Low Level Only

// Basic tokens
%import common.WS
%ignore WS

// Comments - match and ignore entire line
COMMENT: "//" /[^\n]*/ "\n"?
%ignore COMMENT

// Numbers and identifiers
HEX: /#\$[0-9a-fA-F]+/
DECIMAL: /#-?[0-9]+/
IDENT: /[0-9]*[a-zA-Z][a-zA-Z0-9_]*[\+\-\*\<\>\=\&\|\^\~]?/ | /[\+\-\*\<\>\=\&\|\^\~]+/

// Add string literal support for includes
STRING: /"[^"]*"/

// Syntax tokens
COLON: ":"
LBRACKET: "["
RBRACKET: "]"
COMMA: ","

// Macro tokens
MACRO.2: "macro:"
SEMICOLON: ";"

// Include directive
INCLUDE.2: "include"

// Add stack effect comment support
STACK_COMMENT: /\([^)]*\)/

// Basic ALU Operations
T: "T"
N: "N"
T_PLUS_N: "T+N"
T_AND_N: "T&N"
T_OR_N: "T|N"
T_XOR_N: "T^N"
NOT_T: "~T"
N_EQ_T: "N==T"
N_LT_T: "N<T"
N_ULT_T: "Nu<T"
T2_DIV: "T2/"
T2_MUL: "T2*"
RT: "rT"
N_MINUS_T: "N-T"
IO_T: "io[T]"
STATUS: "status"
RSTATUS: "rstatus"
NLSHIFT_T: "NlshiftT"
NRSHIFT_T: "NrshiftT"
NARSHIFT_T: "NarshiftT"
L_UM_MUL: "L-UM*"
H_UM_MUL: "H-UM*"
T_PLUS_1: "T+1"
T_MINUS_1: "T-1"
THIRD_OS: "3OS"
MEM_T: "mem[T]"

// Jump Operations
JMP: "JMP"
ZJMP: "ZJMP"
CALL: "CALL"

// Stack Effect Modifiers
T_TO_N: "T->N"
T_TO_R: "T->R"
N_TO_MEM: "N->[T]"
N_TO_IO: "N->io[T]"
IORD: "IORD"
DINT: "fDINT"
EINT: "fEINT"
RET: "RET"

// Data Stack Delta Modifiers
D_PLUS_0: "d+0"
D_PLUS_1: "d+1"
D_MINUS_1: "d-1"
D_MINUS_2: "d-2"

// Return Stack Delta Modifiers
R_PLUS_0: "r+0"
R_PLUS_1: "r+1"
R_MINUS_1: "r-1"
R_MINUS_2: "r-2"

// Program structure
?start: program
program: statement*
statement: label | instruction | CODE | BYTE | macro_def | include_stmt

// Add include statement rule
include_stmt: INCLUDE STRING

// Add label rule
label: IDENT COLON

// Numbers and references
number: HEX | DECIMAL
labelref: IDENT

// Instructions
instruction: number            // Literal
          | jump_op           // Jump instructions
          | alu_op            // ALU operations
          | macro_call        // Macro invocation

// Jump operations
jump_op: (JMP | ZJMP | CALL) labelref

// ALU operations with optional modifiers
alu_op: basic_alu modifiers?

// Basic ALU operations
basic_alu: T
        | N
        | THIRD_OS
        | T_PLUS_N
        | T_AND_N
        | T_OR_N
        | T_XOR_N
        | NOT_T
        | N_EQ_T
        | N_LT_T
        | N_ULT_T
        | T2_DIV
        | T2_MUL
        | RT
        | N_MINUS_T
        | IO_T
        | STATUS
        | RSTATUS
        | NLSHIFT_T
        | NRSHIFT_T
        | NARSHIFT_T
        | L_UM_MUL
        | H_UM_MUL
        | T_PLUS_1
        | T_MINUS_1
        | MEM_T

// Modifiers
modifiers: LBRACKET modifier_list RBRACKET
modifier_list: modifier (COMMA modifier)*

modifier: stack_effect
       | stack_delta

// Stack effects
stack_effect: T_TO_N
           | T_TO_R
           | N_TO_MEM
           | N_TO_IO
           | IORD
           | DINT
           | EINT
           | RET

// Stack delta modifiers
stack_delta: data_stack_delta
          | return_stack_delta

data_stack_delta: D_PLUS_0 | D_PLUS_1 | D_MINUS_1 | D_MINUS_2
return_stack_delta: R_PLUS_0 | R_PLUS_1 | R_MINUS_1 | R_MINUS_2

// Direct code insertion
CODE: "CODE"
BYTE: "BYTE"

// Add new rules for macros
macro_def: MACRO IDENT STACK_COMMENT? macro_body SEMICOLON
macro_body: instruction+

// Add macro call rule - using a different syntax for lookahead
macro_call: IDENT


