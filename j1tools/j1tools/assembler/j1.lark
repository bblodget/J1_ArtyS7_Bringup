// Core J1 Grammar - Low Level Only

// Basic tokens
%import common.WS
%ignore WS

// Insert new tokens after %ignore WS
%ignore WS

// Define a helper rule for required whitespace
_WS_REQ: WS



// Comments - match and ignore entire line
COMMENT: "//" /[^\n]*/ "\n"?
%ignore COMMENT

// Add stack effect comment support
STACK_COMMENT: /\([^)]*\)/
%ignore STACK_COMMENT

// Numbers and identifiers
//STACK_HEX: /#\$[0-9a-fA-F]+/
//STACK_DECIMAL: /#-?[0-9]+/
//STACK_CHAR: /#'[^']'/

STACK_HEX: /\$[0-9a-fA-F]+/
STACK_DECIMAL: /-?[0-9]+/
STACK_CHAR: /'[^']'/

//RAW_HEX: /\$[0-9a-fA-F]+/
//RAW_DECIMAL: /-?[0-9]+/
//RAW_CHAR: /'[^']'/

// Control Structure Keywords (added with higher priority)
IF.2: "IF"
ELSE.2: "ELSE"
THEN.2: "THEN"
BEGIN.2: "BEGIN"
UNTIL.2: "UNTIL"
WHILE.2: "WHILE"
REPEAT.2: "REPEAT"
DO.2: "DO"
LOOP.2: "LOOP"
PLUS_LOOP.2: "+LOOP"
LEAVE.2: "LEAVE"

// Add to directive tokens
ORG.2: "ORG"

// Add tick token for label referencing
TICK: "'"

// Simplified IDENT pattern to allow identifiers to start with letters, numbers, or symbols
IDENT: /(?!\/\/)[0-9a-zA-Z_!@#$%^&*\+\-=<>,.\?\/\\|~;>]+/

// Add string literal support for includes
STRING: /"[^"]*"/

// Syntax tokens
COLON: ":"
LBRACKET: "["
RBRACKET: "]"
COMMA.2: ","

// Macro tokens
MACRO.2: "macro:"
ENDMACRO.2: "endmacro"

// Include directive
INCLUDE.2: "include"

// Basic ALU Operations
T: "T"
N: "N"
T_PLUS_N: "T+N"
T_AND_N: "T&N"
T_OR_N: "T|N"
T_XOR_N: "T^N"
NOT_T: "~T"
N_EQ_T: "N==T"
N_LT_T: "N<T"
N_ULT_T: "Nu<T"
T2_DIV: "T2/"
T2_MUL: "T2*"
RT: "rT"
N_MINUS_T: "N-T"
IO_T: "io[T]"
STATUS: "status"
RSTATUS: "rstatus"
NLSHIFT_T: "NlshiftT"
NRSHIFT_T: "NrshiftT"
NARSHIFT_T: "NarshiftT"
L_UM_MUL: "L-UM*"
H_UM_MUL: "H-UM*"
T_PLUS_1: "T+1"
T_MINUS_1: "T-1"
THIRD_OS: "3OS"
MEM_T: "mem[T]"

// Jump Operations
JMP: "JMP"
ZJMP: "ZJMP"
CALL: "CALL"

// Stack Effect Modifiers
T_TO_N: "T->N"
T_TO_R: "T->R"
N_TO_MEM: "N->[T]"
N_TO_IO: "N->io[T]"
IORD: "IORD"
DINT: "fDINT"
EINT: "fEINT"
RET: "RET"

// Data Stack Delta Modifiers
D_PLUS_0: "d+0"
D_PLUS_1: "d+1"
D_MINUS_1: "d-1"
D_MINUS_2: "d-2"

// Return Stack Delta Modifiers
R_PLUS_0: "r+0"
R_PLUS_1: "r+1"
R_MINUS_1: "r-1"
R_MINUS_2: "r-2"

// Program structure
?start: program
program: (statement | org_directive )*

//program: program_type (_WS_REQ program_type)*
//program_type: statement | org_directive

//org_directive: ORG raw_number
org_directive: ORG stack_number

statement: (label _WS_REQ) | (instruction _WS_REQ) | (macro_def _WS_REQ) | (include_stmt _WS_REQ)  | (control_structure _WS_REQ) | (memory_init_statement _WS_REQ)

// Define all possible statement types
// ?statement_type: label | instruction | macro_def | include_stmt | control_structure | memory_init_statement

// A statement can be any statement type with optional whitespace-separated additional statement types
// statement: statement_type (_WS_REQ statement_type)*


// Add memory initialization statement rule
//memory_init_statement: (RAW_HEX | RAW_DECIMAL | RAW_CHAR) COMMA
memory_init_statement: (STACK_HEX | STACK_DECIMAL | STACK_CHAR) COMMA

// Add include statement rule
include_stmt: INCLUDE STRING

// Add label rule
label: COLON IDENT

// Numbers and references
stack_number: STACK_HEX | STACK_DECIMAL | STACK_CHAR
// raw_number: RAW_HEX | RAW_DECIMAL | RAW_CHAR
labelref: TICK IDENT  // Only allow tick syntax for label references

// Instructions
instruction: stack_number     // Literal
          | jump_op           // Jump instructions
          | alu_op            // ALU operations
          | call_expr         // Macro or subroutine invocation
          | address_of        // Label reference (push address)

// Jump operations
jump_op: (JMP | ZJMP | CALL) labelref

// Address of operation (standalone tick)
address_of: TICK IDENT  // Same as labelref but standalone to push address

// ALU operations with optional modifiers
alu_op: basic_alu modifiers?

// Basic ALU operations
basic_alu: T
        | N
        | THIRD_OS
        | T_PLUS_N
        | T_AND_N
        | T_OR_N
        | T_XOR_N
        | NOT_T
        | N_EQ_T
        | N_LT_T
        | N_ULT_T
        | T2_DIV
        | T2_MUL
        | RT
        | N_MINUS_T
        | IO_T
        | STATUS
        | RSTATUS
        | NLSHIFT_T
        | NRSHIFT_T
        | NARSHIFT_T
        | L_UM_MUL
        | H_UM_MUL
        | T_PLUS_1
        | T_MINUS_1
        | MEM_T

// Modifiers
modifiers: LBRACKET modifier_list RBRACKET
modifier_list: modifier (COMMA modifier)*
modifier: stack_effect
       | stack_delta

// Stack effects
stack_effect: T_TO_N
           | T_TO_R
           | N_TO_MEM
           | N_TO_IO
           | IORD
           | DINT
           | EINT
           | RET

// Stack delta modifiers
stack_delta: data_stack_delta
          | return_stack_delta

data_stack_delta: D_PLUS_0 | D_PLUS_1 | D_MINUS_1 | D_MINUS_2
return_stack_delta: R_PLUS_0 | R_PLUS_1 | R_MINUS_1 | R_MINUS_2

// Direct code insertion
// TODO: How do we want to do "code literals"
// CODE: "CODE"
// BYTE: "BYTE"

// Add new rules for macros
macro_def: MACRO IDENT STACK_COMMENT? macro_body ENDMACRO
//macro_body: instruction+
macro_body: instruction (_WS_REQ instruction)*

// call_expr: an identifier that is interpreted as a macro call if defined,
// otherwise it is assembled as a CALL instruction.
call_expr: IDENT

// New rules for control structures
// control_structure: if_then | if_else_then | loop_until | loop_while
?control_structure: if_then | if_else_then | loop_until | loop_while | do_loop | do_plus_loop

if_then: IF block THEN
if_else_then: IF block ELSE block THEN

loop_until: BEGIN block UNTIL
loop_while: BEGIN block WHILE block REPEAT
// do_loop: DO block (LOOP | PLUS_LOOP)
do_loop: do_op block loop_op
do_plus_loop: do_op block plus_loop_op

// Note: We could modify the loop_while as follows:
// loop_while: BEGIN block? WHILE block REPEAT
// This would allow us to have an optional block before the WHILE loop.
// This would allow c-style while loops
// We'll stick to the traditional forth style for now.
// If you don't want the unconditional block, you can put a noop there.

//block: (statement)*
block: (block_item)+

?block_item: instruction
        | label
        | control_structure

// New rules for control operations as standalone instructions
// if_op: IF
// then_op: THEN
// else_op: ELSE


// DO LOOP control structure
do_op: DO
loop_op: LOOP
plus_loop_op: PLUS_LOOP

