BYTE     WORD     CODE            #:col    SOURCE
----------------------------------------------------------------------
0000     0000     0001            2:1      JMP 'start                      //  
0002     0001     ----            6:3    :start                            //  
0002     0001     8003            8:5      3                               //  Push limit (3)
0004     0002     8000            9:5      0                               //  Push initial index (0)
0006     0003     6127           10:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0008     0004     6127           11:5      N[T->R,r+1,d-1]                 //  (macro: >r)
000a     0005     ----           13:3    :k_loop                           //  
000a     0005     8002           15:5      2                               //  Push limit (2)
000c     0006     8000           16:5      0                               //  Push initial index (0)
000e     0007     6127           17:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0010     0008     6127           18:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0012     0009     ----           20:3    :j_loop                           //  
0012     0009     8004           22:5      4                               //  Push limit (4)
0014     000a     8000           23:5      0                               //  Push initial index (0)
0016     000b     6127           24:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0018     000c     6127           25:5      N[T->R,r+1,d-1]                 //  (macro: >r)
001a     000d     ----           27:3    :i_loop                           //  
001a     000d     6b1d           29:5      rT[T->N,r-1,d+1]                //  (macro: r>)
001c     000e     6b1d           30:5      rT[T->N,r-1,d+1]                //  (macro: r>)
001e     000f     6b1d           31:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0020     0010     6b1d           32:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0022     0011     6b1d           33:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0024     0012     6b1d           34:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0026     0013     6011           35:5      T[T->N,d+1]                     //  (macro: dup)
0028     0014     6127           36:5      N[T->R,r+1,d-1]                 //  (macro: >r)
002a     0015     6110           37:5      N[T->N]                         //  (macro: swap)
002c     0016     6127           38:5      N[T->R,r+1,d-1]                 //  (macro: >r)
002e     0017     6110           39:5      N[T->N]                         //  (macro: swap)
0030     0018     6127           40:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0032     0019     6110           41:5      N[T->N]                         //  (macro: swap)
0034     001a     6127           42:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0036     001b     6110           43:5      N[T->N]                         //  (macro: swap)
0038     001c     6127           44:5      N[T->R,r+1,d-1]                 //  (macro: >r)
003a     001d     6110           45:5      N[T->N]                         //  (macro: swap)
003c     001e     6127           46:5      N[T->R,r+1,d-1]                 //  (macro: >r)
003e     001f     6103           47:5      N[d-1]                          //  (macro: drop)
0040     0020     6b1d           50:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0042     0021     6b1d           51:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0044     0022     6b1d           52:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0046     0023     6b1d           53:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0048     0024     6011           54:5      T[T->N,d+1]                     //  (macro: dup)
004a     0025     6127           55:5      N[T->R,r+1,d-1]                 //  (macro: >r)
004c     0026     6110           56:5      N[T->N]                         //  (macro: swap)
004e     0027     6127           57:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0050     0028     6110           58:5      N[T->N]                         //  (macro: swap)
0052     0029     6127           59:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0054     002a     6110           60:5      N[T->N]                         //  (macro: swap)
0056     002b     6127           61:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0058     002c     6103           62:5      N[d-1]                          //  (macro: drop)
005a     002d     6b1d           65:5      rT[T->N,r-1,d+1]                //  (macro: r>)
005c     002e     6b1d           66:5      rT[T->N,r-1,d+1]                //  (macro: r>)
005e     002f     6011           67:5      T[T->N,d+1]                     //  (macro: dup)
0060     0030     6127           68:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0062     0031     6110           69:5      N[T->N]                         //  (macro: swap)
0064     0032     6127           70:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0066     0033     6103           71:5      N[d-1]                          //  (macro: drop)
0068     0034     6b1d           74:5      rT[T->N,r-1,d+1]                //  (macro: r>)
006a     0035     6b1d           75:5      rT[T->N,r-1,d+1]                //  (macro: r>)
006c     0036     7600           76:5      T+1                             //  (macro: 1+)
006e     0037     6111           77:5      N[T->N,d+1]                     //  (macro: over)
0070     0038     6111           77:10     N[T->N,d+1]                     //  (macro: over)
0072     0039     6127           78:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0074     003a     6127           79:5      N[T->R,r+1,d-1]                 //  (macro: >r)
0076     003b     6803           80:5      N<T[d-1]                        //  (macro: <)
0078     003c     200d           81:5      ZJMP 'i_loop                    //  Jump if index < limit
007a     003d     600c           82:5      T[r-1]                          //  (macro: rdrop)
007c     003e     600c           83:5      T[r-1]                          //  (macro: rdrop)
007e     003f     6b1d           86:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0080     0040     6b1d           87:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0082     0041     7600           88:5      T+1                             //  (macro: 1+)
0084     0042     6111           89:5      N[T->N,d+1]                     //  (macro: over)
0086     0043     6111           89:10     N[T->N,d+1]                     //  (macro: over)
0088     0044     6127           90:5      N[T->R,r+1,d-1]                 //  (macro: >r)
008a     0045     6127           91:5      N[T->R,r+1,d-1]                 //  (macro: >r)
008c     0046     6803           92:5      N<T[d-1]                        //  (macro: <)
008e     0047     2009           93:5      ZJMP 'j_loop                    //  Jump if index < limit
0090     0048     600c           94:5      T[r-1]                          //  (macro: rdrop)
0092     0049     600c           95:5      T[r-1]                          //  (macro: rdrop)
0094     004a     6b1d           98:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0096     004b     6b1d           99:5      rT[T->N,r-1,d+1]                //  (macro: r>)
0098     004c     7600          100:5      T+1                             //  (macro: 1+)
009a     004d     6111          101:5      N[T->N,d+1]                     //  (macro: over)
009c     004e     6111          101:10     N[T->N,d+1]                     //  (macro: over)
009e     004f     6127          102:5      N[T->R,r+1,d-1]                 //  (macro: >r)
00a0     0050     6127          103:5      N[T->R,r+1,d-1]                 //  (macro: >r)
00a2     0051     6803          104:5      N<T[d-1]                        //  (macro: <)
00a4     0052     2005          105:5      ZJMP 'k_loop                    //  Jump if index < limit
00a6     0053     600c          106:5      T[r-1]                          //  (macro: rdrop)
00a8     0054     600c          107:5      T[r-1]                          //  (macro: rdrop)
00aa     0055     ----          109:3    :wait_forever                     //  
00aa     0055     6000          110:5      T                               //  (macro: noop)
00ac     0056     0055          111:5      JMP 'wait_forever               //  
