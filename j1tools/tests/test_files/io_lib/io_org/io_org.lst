BYTE     WORD     CODE            #:col    SOURCE
----------------------------------------------------------------------
0000     0000     0021            2:1      JMP start                       //  
0002     0001     ----           25:3    :uartstat                         //  
0002     0001     a000           26:5      #$2000                          //  (macro: UART_STATUS_REG)
0004     0002     6d50           26:21     io[T][IORD]                     //  (macro: io@)
0006     0003     6300           26:25     T&N                             //  (macro: overand)
0008     0004     6703           26:33     N==T[d-1]                       //  (macro: =)
000a     0005     608c           27:1      T[RET,r-1]                      //  (macro: ;)
000c     0006     ----           30:3    :emit?                            //  
000c     0006     6000           31:5      T                               //  (macro: pause)
000e     0007     8001           32:5      #1                              //  Push transmit ready mask
0010     0008     a000           33:5      #$2000                          //  (macro: UART_STATUS_REG)
0012     0009     6d50           33:21     io[T][IORD]                     //  (macro: io@)
0014     000a     6300           34:5      T&N                             //  (macro: overand)
0016     000b     6703           35:5      N==T[d-1]                       //  (macro: =)
0018     000c     608c           36:1      T[RET,r-1]                      //  (macro: ;)
001a     000d     ----           39:3    :key?                             //  
001a     000d     6000           40:5      T                               //  (macro: pause)
001c     000e     8002           41:5      #2                              //  Push receive ready mask
001e     000f     4001           42:5      CALL uartstat                   //  Check UART status
0020     0010     608c           43:1      T[RET,r-1]                      //  (macro: ;)
0022     0011     ----           46:3    :emit                             //  
0022     0011     4006           47:5      CALL emit?                      //  Check if ready to transmit
0024     0012     2011           48:5      ZJMP emit                       //  If not ready, keep waiting
0026     0013     9000           49:5      #$1000                          //  (macro: UART_DATA_REG)
0028     0014     7842           49:19     3OS[N->io[T],d-2]               //  (macro: io!)
002a     0015     608c           50:1      T[RET,r-1]                      //  (macro: ;)
002c     0016     ----           53:3    :key                              //  
002c     0016     400d           54:5      CALL key?                       //  Check if character available
002e     0017     2016           55:5      ZJMP key                        //  If no character, keep waiting
0030     0018     9000           56:5      #$1000                          //  (macro: UART_DATA_REG)
0032     0019     6d50           56:19     io[T][IORD]                     //  (macro: io@)
0034     001a     608c           57:1      T[RET,r-1]                      //  (macro: ;)
0036     001b     ----           60:3    :2emit                            //  
0036     001b     6110           61:5      N[T->N]                         //  (macro: swap)
0038     001c     6127           61:10     N[T->R,r+1,d-1]                 //  (macro: >r)
003a     001d     4011           62:5      CALL emit                       //  Send first char
003c     001e     6b1d           63:5      rT[T->N,r-1,d+1]                //  (macro: r>)
003e     001f     4011           63:8      CALL emit                       //  Send second char
0040     0020     608c           64:1      T[RET,r-1]                      //  (macro: ;)
0042     0021     ----            7:3    :start                            //  
0042     0021     4016            8:5      CALL key                        //  Read the character
0044     0022     4011            9:5      CALL emit                       //  Echo it back
0046     0023     800a           10:5      #$0A                            //  Send newline (ASCII 0x0A)
0048     0024     4011           10:10     CALL emit                       //  Send newline (ASCII 0x0A)
004a     0025     ----           12:3    :wait_forever                     //  
004a     0025     6000           13:6      T                               //  (macro: noop)
004c     0026     0025           14:6      JMP wait_forever                //  
