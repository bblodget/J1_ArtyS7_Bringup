// Ignore whitespace
%import common.WS
%ignore WS

// Define what a comment looks like and ignore it
COMMENT: ";" /[^\n]*/
%ignore COMMENT

// Define what a number looks like - treat entire number as one token
HEX: /#\$[0-9a-fA-F]+/
DECIMAL: /#[0-9]+/

// Define what an identifier looks like (for labels)
IDENT: /[a-zA-Z][a-zA-Z0-9_]*/

// ALU Operations
T: "T"
N: "N"
PLUS: "+"
MINUS: "-"
AND: "&"
OR: "|"
XOR: "^"
NOT: "~"
EQUALS: "=="
LESS: "<"
ULESS: "u<"
LSHIFT: "<<"
RSHIFT: ">>"
ARSHIFT: ">>>"
INCREMENT: "1+"
DECREMENT: "1-"

// Stack and Memory Modifiers
T_TO_N: "T->N"
T_TO_R: "T->R"
N_TO_MEM: "N->[T]"
STACK_D: /d[+-][012]/
STACK_R: /r[+-][012]/

// Bracket syntax for modifiers
LBRACKET: "["
RBRACKET: "]"
COMMA: ","

// Define the structure of our program (rules)
?start: program
program: statement*
statement: (label | instruction)

// Label rules
labelref: IDENT
label: IDENT ":"

// Number rule
number: (HEX | DECIMAL)

// Instruction rules
instruction: number
           | alu_op modifiers?

// ALU instruction rules
alu_op: T
      | N
      | T "+" N
      | T "-" N
      | T "&" N
      | T "|" N
      | T "^" N
      | "~" T
      | N "==" T
      | N "<" T
      | N "u<" T
      | N "<<" T
      | N ">>" T
      | N ">>>" T
      | INCREMENT
      | DECREMENT

// Modifier rules
modifier: T_TO_N
        | T_TO_R
        | N_TO_MEM
        | STACK_D
        | STACK_R

modifier_list: modifier ("," modifier)*

modifiers: LBRACKET modifier_list RBRACKET
